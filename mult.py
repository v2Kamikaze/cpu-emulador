from typing import Tuple

def full_adder_1bit(a: int, b: int, c_in: int = 0) -> Tuple[int]:
    s = a ^ b ^ c_in
    c_out =  (b & c_in) | (a & c_in)  | (a & b)
    return s, c_out

def partial_product_32bits(bit_a: int, num_b: int) -> int:
    a = bit_a & 0b11111111111111111111111111111111

    b1 =  (num_b & 0b00000000000000000000000000000001) >> 0
    b2 =  (num_b & 0b00000000000000000000000000000010) >> 1
    b3 =  (num_b & 0b00000000000000000000000000000100) >> 2
    b4 =  (num_b & 0b00000000000000000000000000001000) >> 3
    b5 =  (num_b & 0b00000000000000000000000000010000) >> 4
    b6 =  (num_b & 0b00000000000000000000000000100000) >> 5
    b7 =  (num_b & 0b00000000000000000000000001000000) >> 6
    b8 =  (num_b & 0b00000000000000000000000010000000) >> 7
    b9 =  (num_b & 0b00000000000000000000000100000000) >> 8
    b10 = (num_b & 0b00000000000000000000001000000000) >> 9
    b11 = (num_b & 0b00000000000000000000010000000000) >> 10
    b12 = (num_b & 0b00000000000000000000100000000000) >> 11
    b13 = (num_b & 0b00000000000000000001000000000000) >> 12
    b14 = (num_b & 0b00000000000000000010000000000000) >> 13
    b15 = (num_b & 0b00000000000000000100000000000000) >> 14
    b16 = (num_b & 0b00000000000000001000000000000000) >> 15
    b17 = (num_b & 0b00000000000000010000000000000000) >> 16
    b18 = (num_b & 0b00000000000000100000000000000000) >> 17
    b19 = (num_b & 0b00000000000001000000000000000000) >> 18
    b20 = (num_b & 0b00000000000010000000000000000000) >> 19
    b21 = (num_b & 0b00000000000100000000000000000000) >> 20
    b22 = (num_b & 0b00000000001000000000000000000000) >> 21
    b23 = (num_b & 0b00000000010000000000000000000000) >> 22
    b24 = (num_b & 0b00000000100000000000000000000000) >> 23
    b25 = (num_b & 0b00000001000000000000000000000000) >> 24
    b26 = (num_b & 0b00000010000000000000000000000000) >> 25
    b27 = (num_b & 0b00000100000000000000000000000000) >> 26
    b28 = (num_b & 0b00001000000000000000000000000000) >> 27
    b29 = (num_b & 0b00010000000000000000000000000000) >> 28
    b30 = (num_b & 0b00100000000000000000000000000000) >> 29
    b31 = (num_b & 0b01000000000000000000000000000000) >> 30
    b32 = (num_b & 0b10000000000000000000000000000000) >> 31

    return (a & b32) << 31 | (a & b31) << 30 | (a & b30) << 29 | (a & b29) << 28 | (a & b28) << 27 | (a & b27) << 26| (a & b26) << 25 | (a & b25) << 24 | (a & b24) << 23 | (a & b23) << 22 | (a & b22) << 21 | (a & b21) << 20 | (a & b20) << 19 | (a & b19) << 18 | (a & b18) << 17 | (a & b17) << 16 | (a & b16) << 15 | (a & b15) << 14 | (a & b14) << 13 | (a & b13) << 12 | (a & b12) << 11 | (a & b11) << 10 | (a & b10) << 9 | (a & b9) << 8 | (a & b8) << 7| (a & b7) << 6 | (a & b6) << 5 | (a & b5) << 4 |(a & b4) << 3 | (a & b3) << 2 | (a & b2) << 1 | (a & b1) << 0


def full_adder_32bits(num_a: int, num_b: int, c_in: int = 0) -> Tuple[int]:
    a1 =  (num_a & 0b00000000000000000000000000000001) >> 0
    a2 =  (num_a & 0b00000000000000000000000000000010) >> 1
    a3 =  (num_a & 0b00000000000000000000000000000100) >> 2
    a4 =  (num_a & 0b00000000000000000000000000001000) >> 3
    a5 =  (num_a & 0b00000000000000000000000000010000) >> 4
    a6 =  (num_a & 0b00000000000000000000000000100000) >> 5
    a7 =  (num_a & 0b00000000000000000000000001000000) >> 6
    a8 =  (num_a & 0b00000000000000000000000010000000) >> 7
    a9 =  (num_a & 0b00000000000000000000000100000000) >> 8
    a10 = (num_a & 0b00000000000000000000001000000000) >> 9
    a11 = (num_a & 0b00000000000000000000010000000000) >> 10
    a12 = (num_a & 0b00000000000000000000100000000000) >> 11
    a13 = (num_a & 0b00000000000000000001000000000000) >> 12
    a14 = (num_a & 0b00000000000000000010000000000000) >> 13
    a15 = (num_a & 0b00000000000000000100000000000000) >> 14
    a16 = (num_a & 0b00000000000000001000000000000000) >> 15
    a17 = (num_a & 0b00000000000000010000000000000000) >> 16
    a18 = (num_a & 0b00000000000000100000000000000000) >> 17
    a19 = (num_a & 0b00000000000001000000000000000000) >> 18
    a20 = (num_a & 0b00000000000010000000000000000000) >> 19
    a21 = (num_a & 0b00000000000100000000000000000000) >> 20
    a22 = (num_a & 0b00000000001000000000000000000000) >> 21
    a23 = (num_a & 0b00000000010000000000000000000000) >> 22
    a24 = (num_a & 0b00000000100000000000000000000000) >> 23
    a25 = (num_a & 0b00000001000000000000000000000000) >> 24
    a26 = (num_a & 0b00000010000000000000000000000000) >> 25
    a27 = (num_a & 0b00000100000000000000000000000000) >> 26
    a28 = (num_a & 0b00001000000000000000000000000000) >> 27
    a29 = (num_a & 0b00010000000000000000000000000000) >> 28
    a30 = (num_a & 0b00100000000000000000000000000000) >> 29
    a31 = (num_a & 0b01000000000000000000000000000000) >> 30
    a32 = (num_a & 0b10000000000000000000000000000000) >> 31

    b1 =  (num_b & 0b00000000000000000000000000000001) >> 0
    b2 =  (num_b & 0b00000000000000000000000000000010) >> 1
    b3 =  (num_b & 0b00000000000000000000000000000100) >> 2
    b4 =  (num_b & 0b00000000000000000000000000001000) >> 3
    b5 =  (num_b & 0b00000000000000000000000000010000) >> 4
    b6 =  (num_b & 0b00000000000000000000000000100000) >> 5
    b7 =  (num_b & 0b00000000000000000000000001000000) >> 6
    b8 =  (num_b & 0b00000000000000000000000010000000) >> 7
    b9 =  (num_b & 0b00000000000000000000000100000000) >> 8
    b10 = (num_b & 0b00000000000000000000001000000000) >> 9
    b11 = (num_b & 0b00000000000000000000010000000000) >> 10
    b12 = (num_b & 0b00000000000000000000100000000000) >> 11
    b13 = (num_b & 0b00000000000000000001000000000000) >> 12
    b14 = (num_b & 0b00000000000000000010000000000000) >> 13
    b15 = (num_b & 0b00000000000000000100000000000000) >> 14
    b16 = (num_b & 0b00000000000000001000000000000000) >> 15
    b17 = (num_b & 0b00000000000000010000000000000000) >> 16
    b18 = (num_b & 0b00000000000000100000000000000000) >> 17
    b19 = (num_b & 0b00000000000001000000000000000000) >> 18
    b20 = (num_b & 0b00000000000010000000000000000000) >> 19
    b21 = (num_b & 0b00000000000100000000000000000000) >> 20
    b22 = (num_b & 0b00000000001000000000000000000000) >> 21
    b23 = (num_b & 0b00000000010000000000000000000000) >> 22
    b24 = (num_b & 0b00000000100000000000000000000000) >> 23
    b25 = (num_b & 0b00000001000000000000000000000000) >> 24
    b26 = (num_b & 0b00000010000000000000000000000000) >> 25
    b27 = (num_b & 0b00000100000000000000000000000000) >> 26
    b28 = (num_b & 0b00001000000000000000000000000000) >> 27
    b29 = (num_b & 0b00010000000000000000000000000000) >> 28
    b30 = (num_b & 0b00100000000000000000000000000000) >> 29
    b31 = (num_b & 0b01000000000000000000000000000000) >> 30
    b32 = (num_b & 0b10000000000000000000000000000000) >> 31

    	
    s1, c_out1 = full_adder_1bit(a1, b1, c_in)
    s2, c_out2 = full_adder_1bit(a2, b2, c_out1)
    s3, c_out3 = full_adder_1bit(a3, b3, c_out2)
    s4, c_out4 = full_adder_1bit(a4, b4, c_out3)
    s5, c_out5 = full_adder_1bit(a5, b5, c_out4)
    s6, c_out6 = full_adder_1bit(a6, b6, c_out5)
    s7, c_out7 = full_adder_1bit(a7, b7, c_out6)
    s8, c_out8 = full_adder_1bit(a8, b8, c_out7)
    s9, c_out9 = full_adder_1bit(a9, b9, c_out8)
    s10, c_out10 = full_adder_1bit(a10, b10, c_out9)
    s11, c_out11 = full_adder_1bit(a11, b11, c_out10)
    s12, c_out12 = full_adder_1bit(a12, b12, c_out11)
    s13, c_out13 = full_adder_1bit(a13, b13, c_out12)
    s14, c_out14 = full_adder_1bit(a14, b14, c_out13)
    s15, c_out15 = full_adder_1bit(a15, b15, c_out14)
    s16, c_out16 = full_adder_1bit(a16, b16, c_out15)
    s17, c_out17 = full_adder_1bit(a17, b17, c_out16)
    s18, c_out18 = full_adder_1bit(a18, b18, c_out17)
    s19, c_out19 = full_adder_1bit(a19, b19, c_out18)
    s20, c_out20 = full_adder_1bit(a20, b20, c_out19)
    s21, c_out21 = full_adder_1bit(a21, b21, c_out20)
    s22, c_out22 = full_adder_1bit(a22, b22, c_out21)
    s23, c_out23 = full_adder_1bit(a23, b23, c_out22)
    s24, c_out24 = full_adder_1bit(a24, b24, c_out23)
    s25, c_out25 = full_adder_1bit(a25, b25, c_out24)
    s26, c_out26 = full_adder_1bit(a26, b26, c_out25)
    s27, c_out27 = full_adder_1bit(a27, b27, c_out26)
    s28, c_out28 = full_adder_1bit(a28, b28, c_out27)
    s29, c_out29 = full_adder_1bit(a29, b29, c_out28)
    s30, c_out30 = full_adder_1bit(a30, b30, c_out29)
    s31, c_out31 = full_adder_1bit(a31, b31, c_out30)
    s32, c_out32 = full_adder_1bit(a32, b32, c_out31)

    
    s1 =  (s1 << 0)   & 0b00000000000000000000000000000001
    s2 =  (s2 << 1)   & 0b00000000000000000000000000000010
    s3 =  (s3 << 2)   & 0b00000000000000000000000000000100
    s4 =  (s4 << 3)   & 0b00000000000000000000000000001000
    s5 =  (s5 << 4)   & 0b00000000000000000000000000010000
    s6 =  (s6 << 5)   & 0b00000000000000000000000000100000
    s7 =  (s7 << 6)   & 0b00000000000000000000000001000000
    s8 =  (s8 << 7)   & 0b00000000000000000000000010000000
    s9 =  (s9 << 8)   & 0b00000000000000000000000100000000
    s10 = (s10 << 9)  & 0b00000000000000000000001000000000
    s11 = (s11 << 10) & 0b00000000000000000000010000000000
    s12 = (s12 << 11) & 0b00000000000000000000100000000000
    s13 = (s13 << 12) & 0b00000000000000000001000000000000
    s14 = (s14 << 13) & 0b00000000000000000010000000000000
    s15 = (s15 << 14) & 0b00000000000000000100000000000000
    s16 = (s16 << 15) & 0b00000000000000001000000000000000
    s17 = (s17 << 16) & 0b00000000000000010000000000000000
    s18 = (s18 << 17) & 0b00000000000000100000000000000000
    s19 = (s19 << 18) & 0b00000000000001000000000000000000
    s20 = (s20 << 19) & 0b00000000000010000000000000000000
    s21 = (s21 << 20) & 0b00000000000100000000000000000000
    s22 = (s22 << 21) & 0b00000000001000000000000000000000
    s23 = (s23 << 22) & 0b00000000010000000000000000000000
    s24 = (s24 << 23) & 0b00000000100000000000000000000000
    s25 = (s25 << 24) & 0b00000001000000000000000000000000
    s26 = (s26 << 25) & 0b00000010000000000000000000000000
    s27 = (s27 << 26) & 0b00000100000000000000000000000000
    s28 = (s28 << 27) & 0b00001000000000000000000000000000
    s29 = (s29 << 28) & 0b00010000000000000000000000000000
    s30 = (s30 << 29) & 0b00100000000000000000000000000000
    s31 = (s31 << 30) & 0b01000000000000000000000000000000
    s32 = (s32 << 31) & 0b10000000000000000000000000000000
    
    sum_total =  s1 | s2 | s3 | s4 | s5 | s6 | s7 | s8 | s9 | s10 | s11 | s12 | s13 | s14 | s15 | s16 | s17 | s18 | s19 | s20 | s21 | s22 | s23 | s24 | s25 | s26 | s27 | s28 | s29 | s30 | s31 | s32

    return sum_total, c_out32 


def multiplier_32bits(num_a: int, num_b: int) -> int:
    """
        Retorna o resultado da multiplicação de a por b.
    """
    mask_first_bit = 0b00000000000000000000000000000001

    a1 =  (num_a & 0b00000000000000000000000000000001) >> 0
    a2 =  (num_a & 0b00000000000000000000000000000010) >> 1
    a3 =  (num_a & 0b00000000000000000000000000000100) >> 2
    a4 =  (num_a & 0b00000000000000000000000000001000) >> 3
    a5 =  (num_a & 0b00000000000000000000000000010000) >> 4
    a6 =  (num_a & 0b00000000000000000000000000100000) >> 5
    a7 =  (num_a & 0b00000000000000000000000001000000) >> 6
    a8 =  (num_a & 0b00000000000000000000000010000000) >> 7
    a9 =  (num_a & 0b00000000000000000000000100000000) >> 8
    a10 = (num_a & 0b00000000000000000000001000000000) >> 9
    a11 = (num_a & 0b00000000000000000000010000000000) >> 10
    a12 = (num_a & 0b00000000000000000000100000000000) >> 11
    a13 = (num_a & 0b00000000000000000001000000000000) >> 12
    a14 = (num_a & 0b00000000000000000010000000000000) >> 13
    a15 = (num_a & 0b00000000000000000100000000000000) >> 14
    a16 = (num_a & 0b00000000000000001000000000000000) >> 15
    a17 = (num_a & 0b00000000000000010000000000000000) >> 16
    a18 = (num_a & 0b00000000000000100000000000000000) >> 17
    a19 = (num_a & 0b00000000000001000000000000000000) >> 18
    a20 = (num_a & 0b00000000000010000000000000000000) >> 19
    a21 = (num_a & 0b00000000000100000000000000000000) >> 20
    a22 = (num_a & 0b00000000001000000000000000000000) >> 21
    a23 = (num_a & 0b00000000010000000000000000000000) >> 22
    a24 = (num_a & 0b00000000100000000000000000000000) >> 23
    a25 = (num_a & 0b00000001000000000000000000000000) >> 24
    a26 = (num_a & 0b00000010000000000000000000000000) >> 25
    a27 = (num_a & 0b00000100000000000000000000000000) >> 26
    a28 = (num_a & 0b00001000000000000000000000000000) >> 27
    a29 = (num_a & 0b00010000000000000000000000000000) >> 28
    a30 = (num_a & 0b00100000000000000000000000000000) >> 29
    a31 = (num_a & 0b01000000000000000000000000000000) >> 30
    a32 = (num_a & 0b10000000000000000000000000000000) >> 31

    p1 = partial_product_32bits(a1, num_b)
    q1 = p1 & mask_first_bit

    s1, c_out = full_adder_32bits(partial_product_32bits(a2, num_b), (p1 >> 1) | 0b00000000000000000000000000000000, 0)
    q2 = s1 & mask_first_bit

    s2, c_out = full_adder_32bits(partial_product_32bits(a3, num_b), (s1 >> 1) | (c_out << 31), 0)
    q3 = s2 & mask_first_bit
    s3, c_out = full_adder_32bits(partial_product_32bits(a4, num_b), (s2 >> 1) | (c_out << 31), 0)
    q4 = s3 & mask_first_bit
    s4, c_out = full_adder_32bits(partial_product_32bits(a5, num_b), (s3 >> 1) | (c_out << 31), 0)
    q5 = s4 & mask_first_bit
    s5, c_out = full_adder_32bits(partial_product_32bits(a6, num_b), (s4 >> 1) | (c_out << 31), 0)
    q6 = s5 & mask_first_bit
    s6, c_out = full_adder_32bits(partial_product_32bits(a7, num_b), (s5 >> 1) | (c_out << 31), 0)
    q7 = s6 & mask_first_bit
    s7, c_out = full_adder_32bits(partial_product_32bits(a8, num_b), (s6 >> 1) | (c_out << 31), 0)
    q8 = s7 & mask_first_bit
    s8, c_out = full_adder_32bits(partial_product_32bits(a9, num_b), (s7 >> 1) | (c_out << 31), 0)
    q9 = s8 & mask_first_bit
    s9, c_out = full_adder_32bits(partial_product_32bits(a10, num_b), (s8 >> 1) | (c_out << 31), 0)
    q10 = s9 & mask_first_bit
    s10, c_out = full_adder_32bits(partial_product_32bits(a11, num_b), (s9 >> 1) | (c_out << 31), 0)
    q11 = s10 & mask_first_bit
    s11, c_out = full_adder_32bits(partial_product_32bits(a12, num_b), (s10 >> 1) | (c_out << 31), 0)
    q12 = s11 & mask_first_bit
    s12, c_out = full_adder_32bits(partial_product_32bits(a13, num_b), (s11 >> 1) | (c_out << 31), 0)
    q13 = s12 & mask_first_bit
    s13, c_out = full_adder_32bits(partial_product_32bits(a14, num_b), (s12 >> 1) | (c_out << 31), 0)
    q14 = s13 & mask_first_bit
    s14, c_out = full_adder_32bits(partial_product_32bits(a15, num_b), (s13 >> 1) | (c_out << 31), 0)
    q15 = s14 & mask_first_bit
    s15, c_out = full_adder_32bits(partial_product_32bits(a16, num_b), (s14 >> 1) | (c_out << 31), 0)
    q16 = s15 & mask_first_bit
    s16, c_out = full_adder_32bits(partial_product_32bits(a17, num_b), (s15 >> 1) | (c_out << 31), 0)
    q17 = s16 & mask_first_bit
    s17, c_out = full_adder_32bits(partial_product_32bits(a18, num_b), (s16 >> 1) | (c_out << 31), 0)
    q18 = s17 & mask_first_bit
    s18, c_out = full_adder_32bits(partial_product_32bits(a19, num_b), (s17 >> 1) | (c_out << 31), 0)
    q19 = s18 & mask_first_bit
    s19, c_out = full_adder_32bits(partial_product_32bits(a20, num_b), (s18 >> 1) | (c_out << 31), 0)
    q20 = s19 & mask_first_bit
    s20, c_out = full_adder_32bits(partial_product_32bits(a21, num_b), (s19 >> 1) | (c_out << 31), 0)
    q21 = s20 & mask_first_bit
    s21, c_out = full_adder_32bits(partial_product_32bits(a22, num_b), (s20 >> 1) | (c_out << 31), 0)
    q22 = s21 & mask_first_bit
    s22, c_out = full_adder_32bits(partial_product_32bits(a23, num_b), (s21 >> 1) | (c_out << 31), 0)
    q23 = s22 & mask_first_bit
    s23, c_out = full_adder_32bits(partial_product_32bits(a24, num_b), (s22 >> 1) | (c_out << 31), 0)
    q24 = s23 & mask_first_bit
    s24, c_out = full_adder_32bits(partial_product_32bits(a25, num_b), (s23 >> 1) | (c_out << 31), 0)
    q25 = s24 & mask_first_bit
    s25, c_out = full_adder_32bits(partial_product_32bits(a26, num_b), (s24 >> 1) | (c_out << 31), 0)
    q26 = s25 & mask_first_bit
    s26, c_out = full_adder_32bits(partial_product_32bits(a27, num_b), (s25 >> 1) | (c_out << 31), 0)
    q27 = s26 & mask_first_bit
    s27, c_out = full_adder_32bits(partial_product_32bits(a28, num_b), (s26 >> 1) | (c_out << 31), 0)
    q28 = s27 & mask_first_bit
    s28, c_out = full_adder_32bits(partial_product_32bits(a29, num_b), (s27 >> 1) | (c_out << 31), 0)
    q29 = s28 & mask_first_bit
    s29, c_out = full_adder_32bits(partial_product_32bits(a30, num_b), (s28 >> 1) | (c_out << 31), 0)
    q30 = s29 & mask_first_bit
    s30, c_out = full_adder_32bits(partial_product_32bits(a31, num_b), (s29 >> 1) | (c_out << 31), 0)
    q31 = s30 & mask_first_bit
    s31, c_out = full_adder_32bits(partial_product_32bits(a32, num_b), (s30 >> 1) | (c_out << 31), 0)
    q32 = s31 & mask_first_bit

    q33 = (s31 & 0b00000000000000000000000000000010) >> 1  
    q34 = (s31 & 0b00000000000000000000000000000100) >> 2
    q35 = (s31 & 0b00000000000000000000000000001000) >> 3
    q36 = (s31 & 0b00000000000000000000000000010000) >> 4
    q37 = (s31 & 0b00000000000000000000000000100000) >> 5
    q38 = (s31 & 0b00000000000000000000000001000000) >> 6
    q39 = (s31 & 0b00000000000000000000000010000000) >> 7
    q40 = (s31 & 0b00000000000000000000000100000000) >> 8
    q41 = (s31 & 0b00000000000000000000001000000000) >> 9
    q42 = (s31 & 0b00000000000000000000010000000000) >> 10
    q43 = (s31 & 0b00000000000000000000100000000000) >> 11
    q44 = (s31 & 0b00000000000000000001000000000000) >> 12
    q45 = (s31 & 0b00000000000000000010000000000000) >> 13
    q46 = (s31 & 0b00000000000000000100000000000000) >> 14
    q47 = (s31 & 0b00000000000000001000000000000000) >> 15
    q48 = (s31 & 0b00000000000000010000000000000000) >> 16
    q49 = (s31 & 0b00000000000000100000000000000000) >> 17
    q50 = (s31 & 0b00000000000001000000000000000000) >> 18
    q51 = (s31 & 0b00000000000010000000000000000000) >> 19
    q52 = (s31 & 0b00000000000100000000000000000000) >> 20
    q53 = (s31 & 0b00000000001000000000000000000000) >> 21
    q54 = (s31 & 0b00000000010000000000000000000000) >> 22
    q55 = (s31 & 0b00000000100000000000000000000000) >> 23
    q56 = (s31 & 0b00000001000000000000000000000000) >> 24
    q57 = (s31 & 0b00000010000000000000000000000000) >> 25
    q58 = (s31 & 0b00000100000000000000000000000000) >> 26
    q59 = (s31 & 0b00001000000000000000000000000000) >> 27
    q60 = (s31 & 0b00010000000000000000000000000000) >> 28
    q61 = (s31 & 0b00100000000000000000000000000000) >> 29
    q62 = (s31 & 0b01000000000000000000000000000000) >> 30
    q63 = (s31 & 0b10000000000000000000000000000000) >> 31


    q1 = q1 << 0
    q2 = q2 << 1
    q3 = q3 << 2
    q4 = q4 << 3
    q5 = q5 << 4
    q6 = q6 << 5
    q7 = q7 << 6
    q8 = q8 << 7
    q9 = q9 << 8
    q10 = q10 << 9
    q11 = q11 << 10
    q12 = q12 << 11
    q13 = q13 << 12
    q14 = q14 << 13
    q15 = q15 << 14
    q16 = q16 << 15
    q17 = q17 << 16
    q18 = q18 << 17
    q19 = q19 << 18
    q20 = q20 << 19
    q21 = q21 << 20
    q22 = q22 << 21
    q23 = q23 << 22
    q24 = q24 << 23
    q25 = q25 << 24
    q26 = q26 << 25
    q27 = q27 << 26
    q28 = q28 << 27
    q29 = q29 << 28
    q30 = q30 << 29
    q31 = q31 << 30
    q32 = q32 << 31
    q33 = q33 << 32
    q34 = q34 << 33
    q35 = q35 << 34
    q36 = q36 << 35
    q37 = q37 << 36
    q38 = q38 << 37
    q39 = q39 << 38
    q40 = q40 << 39
    q41 = q41 << 40
    q42 = q42 << 41
    q43 = q43 << 42
    q44 = q44 << 43
    q45 = q45 << 44
    q46 = q46 << 45
    q47 = q47 << 46
    q48 = q48 << 47
    q49 = q49 << 48
    q50 = q50 << 49
    q51 = q51 << 50
    q52 = q52 << 51
    q53 = q53 << 52
    q54 = q54 << 53
    q55 = q55 << 54
    q56 = q56 << 55
    q57 = q57 << 56
    q58 = q58 << 57
    q59 = q59 << 58
    q60 = q60 << 59
    q61 = q61 << 60
    q62 = q62 << 61
    q63 = q63 << 62
    c_out = c_out << 63

    return c_out | q63 | q62 | q61 | q60 | q59 | q58 | q57 | q56 | q55 | q54 | q53 | q52 | q51 | q50 | q49 | q48 | q47 | q46 | q45 | q44 | q43 | q42 | q41 | q40 | q39 | q38 | q37 | q36 | q35 | q34 | q33 | q32 | q31 | q30 | q29 | q28 | q27 | q26 | q25 | q24 | q23 | q22 | q21 | q20 | q19 | q18 | q17 | q16 | q15 | q14 | q13 | q12 | q11 | q10 | q9 | q8 | q7 | q6 | q5 | q4 | q3 | q2 | q1
