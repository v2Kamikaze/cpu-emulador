from typing import Tuple


def multiplexer_1x1(bit_a: int, bit_b: int, switch: int = 0) -> int:
    return (bit_a & switch) | (bit_b & (switch ^ 0b1))


def full_subtractor_1bit(bit_a: int, bit_b: int, borrow_in: int = 0) -> Tuple[int]:
    diff = (bit_a ^ bit_b) ^ borrow_in
    borrow_out = (bit_b & borrow_in) | ((bit_a ^ 0b1) & borrow_in) | ((bit_a ^ 0b1) & bit_b)
    return diff, borrow_out


def multiplexer_31bits(num_a: int, num_b: int, switch: int = 0) -> int:
    a1 =  (num_a & 0b0000000000000000000000000000001) >> 0
    a2 =  (num_a & 0b0000000000000000000000000000010) >> 1
    a3 =  (num_a & 0b0000000000000000000000000000100) >> 2
    a4 =  (num_a & 0b0000000000000000000000000001000) >> 3
    a5 =  (num_a & 0b0000000000000000000000000010000) >> 4
    a6 =  (num_a & 0b0000000000000000000000000100000) >> 5
    a7 =  (num_a & 0b0000000000000000000000001000000) >> 6
    a8 =  (num_a & 0b0000000000000000000000010000000) >> 7
    a9 =  (num_a & 0b0000000000000000000000100000000) >> 8
    a10 = (num_a & 0b0000000000000000000001000000000) >> 9
    a11 = (num_a & 0b0000000000000000000010000000000) >> 10
    a12 = (num_a & 0b0000000000000000000100000000000) >> 11
    a13 = (num_a & 0b0000000000000000001000000000000) >> 12
    a14 = (num_a & 0b0000000000000000010000000000000) >> 13
    a15 = (num_a & 0b0000000000000000100000000000000) >> 14
    a16 = (num_a & 0b0000000000000001000000000000000) >> 15
    a17 = (num_a & 0b0000000000000010000000000000000) >> 16
    a18 = (num_a & 0b0000000000000100000000000000000) >> 17
    a19 = (num_a & 0b0000000000001000000000000000000) >> 18
    a20 = (num_a & 0b0000000000010000000000000000000) >> 19
    a21 = (num_a & 0b0000000000100000000000000000000) >> 20
    a22 = (num_a & 0b0000000001000000000000000000000) >> 21
    a23 = (num_a & 0b0000000010000000000000000000000) >> 22
    a24 = (num_a & 0b0000000100000000000000000000000) >> 23
    a25 = (num_a & 0b0000001000000000000000000000000) >> 24
    a26 = (num_a & 0b0000010000000000000000000000000) >> 25
    a27 = (num_a & 0b0000100000000000000000000000000) >> 26
    a28 = (num_a & 0b0001000000000000000000000000000) >> 27
    a29 = (num_a & 0b0010000000000000000000000000000) >> 28
    a30 = (num_a & 0b0100000000000000000000000000000) >> 29
    a31 = (num_a & 0b1000000000000000000000000000000) >> 30

    b1 =  (num_b & 0b00000000000000000000000000000001) >> 0
    b2 =  (num_b & 0b00000000000000000000000000000010) >> 1
    b3 =  (num_b & 0b00000000000000000000000000000100) >> 2
    b4 =  (num_b & 0b00000000000000000000000000001000) >> 3
    b5 =  (num_b & 0b00000000000000000000000000010000) >> 4
    b6 =  (num_b & 0b00000000000000000000000000100000) >> 5
    b7 =  (num_b & 0b00000000000000000000000001000000) >> 6
    b8 =  (num_b & 0b00000000000000000000000010000000) >> 7
    b9 =  (num_b & 0b00000000000000000000000100000000) >> 8
    b10 = (num_b & 0b00000000000000000000001000000000) >> 9
    b11 = (num_b & 0b00000000000000000000010000000000) >> 10
    b12 = (num_b & 0b00000000000000000000100000000000) >> 11
    b13 = (num_b & 0b00000000000000000001000000000000) >> 12
    b14 = (num_b & 0b00000000000000000010000000000000) >> 13
    b15 = (num_b & 0b00000000000000000100000000000000) >> 14
    b16 = (num_b & 0b00000000000000001000000000000000) >> 15
    b17 = (num_b & 0b00000000000000010000000000000000) >> 16
    b18 = (num_b & 0b00000000000000100000000000000000) >> 17
    b19 = (num_b & 0b00000000000001000000000000000000) >> 18
    b20 = (num_b & 0b00000000000010000000000000000000) >> 19
    b21 = (num_b & 0b00000000000100000000000000000000) >> 20
    b22 = (num_b & 0b00000000001000000000000000000000) >> 21
    b23 = (num_b & 0b00000000010000000000000000000000) >> 22
    b24 = (num_b & 0b00000000100000000000000000000000) >> 23
    b25 = (num_b & 0b00000001000000000000000000000000) >> 24
    b26 = (num_b & 0b00000010000000000000000000000000) >> 25
    b27 = (num_b & 0b00000100000000000000000000000000) >> 26
    b28 = (num_b & 0b00001000000000000000000000000000) >> 27
    b29 = (num_b & 0b00010000000000000000000000000000) >> 28
    b30 = (num_b & 0b00100000000000000000000000000000) >> 29
    b31 = (num_b & 0b01000000000000000000000000000000) >> 30


    o1 = multiplexer_1x1(a1, b1, switch)
    o2 = multiplexer_1x1(a2, b2, switch)
    o3 = multiplexer_1x1(a3, b3, switch)
    o4 = multiplexer_1x1(a4, b4, switch)
    o5 = multiplexer_1x1(a5, b5, switch)
    o6 = multiplexer_1x1(a6, b6, switch)
    o7 = multiplexer_1x1(a7, b7, switch)
    o8 = multiplexer_1x1(a8, b8, switch)
    o9 = multiplexer_1x1(a9, b9, switch)
    o10 = multiplexer_1x1(a10, b10, switch)
    o11 = multiplexer_1x1(a11, b11, switch)
    o12 = multiplexer_1x1(a12, b12, switch)
    o13 = multiplexer_1x1(a13, b13, switch)
    o14 = multiplexer_1x1(a14, b14, switch)
    o15 = multiplexer_1x1(a15, b15, switch)
    o16 = multiplexer_1x1(a16, b16, switch)
    o17 = multiplexer_1x1(a17, b17, switch)
    o18 = multiplexer_1x1(a18, b18, switch)
    o19 = multiplexer_1x1(a19, b19, switch)
    o20 = multiplexer_1x1(a20, b20, switch)
    o21 = multiplexer_1x1(a21, b21, switch)
    o22 = multiplexer_1x1(a22, b22, switch)
    o23 = multiplexer_1x1(a23, b23, switch)
    o24 = multiplexer_1x1(a24, b24, switch)
    o25 = multiplexer_1x1(a25, b25, switch)
    o26 = multiplexer_1x1(a26, b26, switch)
    o27 = multiplexer_1x1(a27, b27, switch)
    o28 = multiplexer_1x1(a28, b28, switch)
    o29 = multiplexer_1x1(a29, b29, switch)
    o30 = multiplexer_1x1(a30, b30, switch)
    o31 = multiplexer_1x1(a31, b31, switch)

    o1 = o1 << 0
    o2 = o2 << 1
    o3 = o3 << 2
    o4 = o4 << 3
    o5 = o5 << 4
    o6 = o6 << 5
    o7 = o7 << 6
    o8 = o8 << 7
    o9 = o9 << 8
    o10 = o10 << 9
    o11 = o11 << 10
    o12 = o12 << 11
    o13 = o13 << 12
    o14 = o14 << 13
    o15 = o15 << 14
    o16 = o16 << 15
    o17 = o17 << 16
    o18 = o18 << 17
    o19 = o19 << 18
    o20 = o20 << 19
    o21 = o21 << 20
    o22 = o22 << 21
    o23 = o23 << 22
    o24 = o24 << 23
    o25 = o25 << 24
    o26 = o26 << 25
    o27 = o27 << 26
    o28 = o28 << 27
    o29 = o29 << 28
    o30 = o30 << 29
    o31 = o31 << 30

    return o31 | o30 | o29 | o28 | o27 | o26 | o25 | o24 | o23 | o22 | o21 | o20 | o19 | o18 | o17 | o16 | o15 | o14 | o13 | o12 | o11 | o10 | o9 | o8 | o7 | o6 | o5 | o4 | o3 | o2 | o1


def multiplexer_32bits(num_a: int, num_b: int, switch: int = 0) -> int:
    a1 =  (num_a & 0b00000000000000000000000000000001) >> 0
    a2 =  (num_a & 0b00000000000000000000000000000010) >> 1
    a3 =  (num_a & 0b00000000000000000000000000000100) >> 2
    a4 =  (num_a & 0b00000000000000000000000000001000) >> 3
    a5 =  (num_a & 0b00000000000000000000000000010000) >> 4
    a6 =  (num_a & 0b00000000000000000000000000100000) >> 5
    a7 =  (num_a & 0b00000000000000000000000001000000) >> 6
    a8 =  (num_a & 0b00000000000000000000000010000000) >> 7
    a9 =  (num_a & 0b00000000000000000000000100000000) >> 8
    a10 = (num_a & 0b00000000000000000000001000000000) >> 9
    a11 = (num_a & 0b00000000000000000000010000000000) >> 10
    a12 = (num_a & 0b00000000000000000000100000000000) >> 11
    a13 = (num_a & 0b00000000000000000001000000000000) >> 12
    a14 = (num_a & 0b00000000000000000010000000000000) >> 13
    a15 = (num_a & 0b00000000000000000100000000000000) >> 14
    a16 = (num_a & 0b00000000000000001000000000000000) >> 15
    a17 = (num_a & 0b00000000000000010000000000000000) >> 16
    a18 = (num_a & 0b00000000000000100000000000000000) >> 17
    a19 = (num_a & 0b00000000000001000000000000000000) >> 18
    a20 = (num_a & 0b00000000000010000000000000000000) >> 19
    a21 = (num_a & 0b00000000000100000000000000000000) >> 20
    a22 = (num_a & 0b00000000001000000000000000000000) >> 21
    a23 = (num_a & 0b00000000010000000000000000000000) >> 22
    a24 = (num_a & 0b00000000100000000000000000000000) >> 23
    a25 = (num_a & 0b00000001000000000000000000000000) >> 24
    a26 = (num_a & 0b00000010000000000000000000000000) >> 25
    a27 = (num_a & 0b00000100000000000000000000000000) >> 26
    a28 = (num_a & 0b00001000000000000000000000000000) >> 27
    a29 = (num_a & 0b00010000000000000000000000000000) >> 28
    a30 = (num_a & 0b00100000000000000000000000000000) >> 29
    a31 = (num_a & 0b01000000000000000000000000000000) >> 30
    a32 = (num_a & 0b10000000000000000000000000000000) >> 31

    b1 =  (num_b & 0b00000000000000000000000000000001) >> 0
    b2 =  (num_b & 0b00000000000000000000000000000010) >> 1
    b3 =  (num_b & 0b00000000000000000000000000000100) >> 2
    b4 =  (num_b & 0b00000000000000000000000000001000) >> 3
    b5 =  (num_b & 0b00000000000000000000000000010000) >> 4
    b6 =  (num_b & 0b00000000000000000000000000100000) >> 5
    b7 =  (num_b & 0b00000000000000000000000001000000) >> 6
    b8 =  (num_b & 0b00000000000000000000000010000000) >> 7
    b9 =  (num_b & 0b00000000000000000000000100000000) >> 8
    b10 = (num_b & 0b00000000000000000000001000000000) >> 9
    b11 = (num_b & 0b00000000000000000000010000000000) >> 10
    b12 = (num_b & 0b00000000000000000000100000000000) >> 11
    b13 = (num_b & 0b00000000000000000001000000000000) >> 12
    b14 = (num_b & 0b00000000000000000010000000000000) >> 13
    b15 = (num_b & 0b00000000000000000100000000000000) >> 14
    b16 = (num_b & 0b00000000000000001000000000000000) >> 15
    b17 = (num_b & 0b00000000000000010000000000000000) >> 16
    b18 = (num_b & 0b00000000000000100000000000000000) >> 17
    b19 = (num_b & 0b00000000000001000000000000000000) >> 18
    b20 = (num_b & 0b00000000000010000000000000000000) >> 19
    b21 = (num_b & 0b00000000000100000000000000000000) >> 20
    b22 = (num_b & 0b00000000001000000000000000000000) >> 21
    b23 = (num_b & 0b00000000010000000000000000000000) >> 22
    b24 = (num_b & 0b00000000100000000000000000000000) >> 23
    b25 = (num_b & 0b00000001000000000000000000000000) >> 24
    b26 = (num_b & 0b00000010000000000000000000000000) >> 25
    b27 = (num_b & 0b00000100000000000000000000000000) >> 26
    b28 = (num_b & 0b00001000000000000000000000000000) >> 27
    b29 = (num_b & 0b00010000000000000000000000000000) >> 28
    b30 = (num_b & 0b00100000000000000000000000000000) >> 29
    b31 = (num_b & 0b01000000000000000000000000000000) >> 30
    b32 = (num_b & 0b10000000000000000000000000000000) >> 31


    o1 = multiplexer_1x1(a1, b1, switch)
    o2 = multiplexer_1x1(a2, b2, switch)
    o3 = multiplexer_1x1(a3, b3, switch)
    o4 = multiplexer_1x1(a4, b4, switch)
    o5 = multiplexer_1x1(a5, b5, switch)
    o6 = multiplexer_1x1(a6, b6, switch)
    o7 = multiplexer_1x1(a7, b7, switch)
    o8 = multiplexer_1x1(a8, b8, switch)
    o9 = multiplexer_1x1(a9, b9, switch)
    o10 = multiplexer_1x1(a10, b10, switch)
    o11 = multiplexer_1x1(a11, b11, switch)
    o12 = multiplexer_1x1(a12, b12, switch)
    o13 = multiplexer_1x1(a13, b13, switch)
    o14 = multiplexer_1x1(a14, b14, switch)
    o15 = multiplexer_1x1(a15, b15, switch)
    o16 = multiplexer_1x1(a16, b16, switch)
    o17 = multiplexer_1x1(a17, b17, switch)
    o18 = multiplexer_1x1(a18, b18, switch)
    o19 = multiplexer_1x1(a19, b19, switch)
    o20 = multiplexer_1x1(a20, b20, switch)
    o21 = multiplexer_1x1(a21, b21, switch)
    o22 = multiplexer_1x1(a22, b22, switch)
    o23 = multiplexer_1x1(a23, b23, switch)
    o24 = multiplexer_1x1(a24, b24, switch)
    o25 = multiplexer_1x1(a25, b25, switch)
    o26 = multiplexer_1x1(a26, b26, switch)
    o27 = multiplexer_1x1(a27, b27, switch)
    o28 = multiplexer_1x1(a28, b28, switch)
    o29 = multiplexer_1x1(a29, b29, switch)
    o30 = multiplexer_1x1(a30, b30, switch)
    o31 = multiplexer_1x1(a31, b31, switch)
    o32 = multiplexer_1x1(a32, b32, switch)

    o1 = o1 << 0
    o2 = o2 << 1
    o3 = o3 << 2
    o4 = o4 << 3
    o5 = o5 << 4
    o6 = o6 << 5
    o7 = o7 << 6
    o8 = o8 << 7
    o9 = o9 << 8
    o10 = o10 << 9
    o11 = o11 << 10
    o12 = o12 << 11
    o13 = o13 << 12
    o14 = o14 << 13
    o15 = o15 << 14
    o16 = o16 << 15
    o17 = o17 << 16
    o18 = o18 << 17
    o19 = o19 << 18
    o20 = o20 << 19
    o21 = o21 << 20
    o22 = o22 << 21
    o23 = o23 << 22
    o24 = o24 << 23
    o25 = o25 << 24
    o26 = o26 << 25
    o27 = o27 << 26
    o28 = o28 << 27
    o29 = o29 << 28
    o30 = o30 << 29
    o31 = o31 << 30
    o32 = o32 << 31

    return o32 | o31 | o30 | o29 | o28 | o27 | o26 | o25 | o24 | o23 | o22 | o21 | o20 | o19 | o18 | o17 | o16 | o15 | o14 | o13 | o12 | o11 | o10 | o9 | o8 | o7 | o6 | o5 | o4 | o3 | o2 | o1


def full_subtractor_32bits(num_a: int, num_b: int, borrow_in: int = 0) -> Tuple[int]:
    a1 =  (num_a & 0b00000000000000000000000000000001) >> 0
    a2 =  (num_a & 0b00000000000000000000000000000010) >> 1
    a3 =  (num_a & 0b00000000000000000000000000000100) >> 2
    a4 =  (num_a & 0b00000000000000000000000000001000) >> 3
    a5 =  (num_a & 0b00000000000000000000000000010000) >> 4
    a6 =  (num_a & 0b00000000000000000000000000100000) >> 5
    a7 =  (num_a & 0b00000000000000000000000001000000) >> 6
    a8 =  (num_a & 0b00000000000000000000000010000000) >> 7
    a9 =  (num_a & 0b00000000000000000000000100000000) >> 8
    a10 = (num_a & 0b00000000000000000000001000000000) >> 9
    a11 = (num_a & 0b00000000000000000000010000000000) >> 10
    a12 = (num_a & 0b00000000000000000000100000000000) >> 11
    a13 = (num_a & 0b00000000000000000001000000000000) >> 12
    a14 = (num_a & 0b00000000000000000010000000000000) >> 13
    a15 = (num_a & 0b00000000000000000100000000000000) >> 14
    a16 = (num_a & 0b00000000000000001000000000000000) >> 15
    a17 = (num_a & 0b00000000000000010000000000000000) >> 16
    a18 = (num_a & 0b00000000000000100000000000000000) >> 17
    a19 = (num_a & 0b00000000000001000000000000000000) >> 18
    a20 = (num_a & 0b00000000000010000000000000000000) >> 19
    a21 = (num_a & 0b00000000000100000000000000000000) >> 20
    a22 = (num_a & 0b00000000001000000000000000000000) >> 21
    a23 = (num_a & 0b00000000010000000000000000000000) >> 22
    a24 = (num_a & 0b00000000100000000000000000000000) >> 23
    a25 = (num_a & 0b00000001000000000000000000000000) >> 24
    a26 = (num_a & 0b00000010000000000000000000000000) >> 25
    a27 = (num_a & 0b00000100000000000000000000000000) >> 26
    a28 = (num_a & 0b00001000000000000000000000000000) >> 27
    a29 = (num_a & 0b00010000000000000000000000000000) >> 28
    a30 = (num_a & 0b00100000000000000000000000000000) >> 29
    a31 = (num_a & 0b01000000000000000000000000000000) >> 30
    a32 = (num_a & 0b10000000000000000000000000000000) >> 31

    b1 =  (num_b & 0b00000000000000000000000000000001) >> 0
    b2 =  (num_b & 0b00000000000000000000000000000010) >> 1
    b3 =  (num_b & 0b00000000000000000000000000000100) >> 2
    b4 =  (num_b & 0b00000000000000000000000000001000) >> 3
    b5 =  (num_b & 0b00000000000000000000000000010000) >> 4
    b6 =  (num_b & 0b00000000000000000000000000100000) >> 5
    b7 =  (num_b & 0b00000000000000000000000001000000) >> 6
    b8 =  (num_b & 0b00000000000000000000000010000000) >> 7
    b9 =  (num_b & 0b00000000000000000000000100000000) >> 8
    b10 = (num_b & 0b00000000000000000000001000000000) >> 9
    b11 = (num_b & 0b00000000000000000000010000000000) >> 10
    b12 = (num_b & 0b00000000000000000000100000000000) >> 11
    b13 = (num_b & 0b00000000000000000001000000000000) >> 12
    b14 = (num_b & 0b00000000000000000010000000000000) >> 13
    b15 = (num_b & 0b00000000000000000100000000000000) >> 14
    b16 = (num_b & 0b00000000000000001000000000000000) >> 15
    b17 = (num_b & 0b00000000000000010000000000000000) >> 16
    b18 = (num_b & 0b00000000000000100000000000000000) >> 17
    b19 = (num_b & 0b00000000000001000000000000000000) >> 18
    b20 = (num_b & 0b00000000000010000000000000000000) >> 19
    b21 = (num_b & 0b00000000000100000000000000000000) >> 20
    b22 = (num_b & 0b00000000001000000000000000000000) >> 21
    b23 = (num_b & 0b00000000010000000000000000000000) >> 22
    b24 = (num_b & 0b00000000100000000000000000000000) >> 23
    b25 = (num_b & 0b00000001000000000000000000000000) >> 24
    b26 = (num_b & 0b00000010000000000000000000000000) >> 25
    b27 = (num_b & 0b00000100000000000000000000000000) >> 26
    b28 = (num_b & 0b00001000000000000000000000000000) >> 27
    b29 = (num_b & 0b00010000000000000000000000000000) >> 28
    b30 = (num_b & 0b00100000000000000000000000000000) >> 29
    b31 = (num_b & 0b01000000000000000000000000000000) >> 30
    b32 = (num_b & 0b10000000000000000000000000000000) >> 31

    d1, bo1 = full_subtractor_1bit(a1, b1, borrow_in)
    d2, bo2 = full_subtractor_1bit(a2, b2, bo1)
    d3, bo3 = full_subtractor_1bit(a3, b3, bo2)
    d4, bo4 = full_subtractor_1bit(a4, b4, bo3)
    d5, bo5 = full_subtractor_1bit(a5, b5, bo4)
    d6, bo6 = full_subtractor_1bit(a6, b6, bo5)
    d7, bo7 = full_subtractor_1bit(a7, b7, bo6)
    d8, bo8 = full_subtractor_1bit(a8, b8, bo7)
    d9, bo9 = full_subtractor_1bit(a9, b9, bo8)
    d10, bo10 = full_subtractor_1bit(a10, b10, bo9)
    d11, bo11 = full_subtractor_1bit(a11, b11, bo10)
    d12, bo12 = full_subtractor_1bit(a12, b12, bo11)
    d13, bo13 = full_subtractor_1bit(a13, b13, bo12)
    d14, bo14 = full_subtractor_1bit(a14, b14, bo13)
    d15, bo15 = full_subtractor_1bit(a15, b15, bo14)
    d16, bo16 = full_subtractor_1bit(a16, b16, bo15)
    d17, bo17 = full_subtractor_1bit(a17, b17, bo16)
    d18, bo18 = full_subtractor_1bit(a18, b18, bo17)
    d19, bo19 = full_subtractor_1bit(a19, b19, bo18)
    d20, bo20 = full_subtractor_1bit(a20, b20, bo19)
    d21, bo21 = full_subtractor_1bit(a21, b21, bo20)
    d22, bo22 = full_subtractor_1bit(a22, b22, bo21)
    d23, bo23 = full_subtractor_1bit(a23, b23, bo22)
    d24, bo24 = full_subtractor_1bit(a24, b24, bo23)
    d25, bo25 = full_subtractor_1bit(a25, b25, bo24)
    d26, bo26 = full_subtractor_1bit(a26, b26, bo25)
    d27, bo27 = full_subtractor_1bit(a27, b27, bo26)
    d28, bo28 = full_subtractor_1bit(a28, b28, bo27)
    d29, bo29 = full_subtractor_1bit(a29, b29, bo28)
    d30, bo30 = full_subtractor_1bit(a30, b30, bo29)
    d31, bo31 = full_subtractor_1bit(a31, b31, bo30)
    d32, bo32 = full_subtractor_1bit(a32, b32, bo31)

    d1 = d1 << 0
    d2 = d2 << 1
    d3 = d3 << 2
    d4 = d4 << 3
    d5 = d5 << 4
    d6 = d6 << 5
    d7 = d7 << 6
    d8 = d8 << 7
    d9 = d9 << 8
    d10 = d10 << 9
    d11 = d11 << 10
    d12 = d12 << 11
    d13 = d13 << 12
    d14 = d14 << 13
    d15 = d15 << 14
    d16 = d16 << 15
    d17 = d17 << 16
    d18 = d18 << 17
    d19 = d19 << 18
    d20 = d20 << 19
    d21 = d21 << 20
    d22 = d22 << 21
    d23 = d23 << 22
    d24 = d24 << 23
    d25 = d25 << 24
    d26 = d26 << 25
    d27 = d27 << 26
    d28 = d28 << 27
    d29 = d29 << 28
    d30 = d30 << 29
    d31 = d31 << 30
    d32 = d32 << 31
    
    diff = d32 | d31 | d30 | d29 | d28 | d27 | d26 | d25 | d24 | d23 | d22 | d21 | d20 | d19 | d18 | d17 | d16 | d15 | d14 | d13 | d12 | d11 | d10 | d9 | d8 | d7 | d6 | d5 | d4 | d3 | d2 | d1
    return diff, bo32


def divider_32bits(num_a: int, num_b: int) -> Tuple[int]:
    """
        Retorna o resultado da divisão inteira e o módulo da divisão.
    """
    a1 =  (num_a & 0b00000000000000000000000000000001) >> 0
    a2 =  (num_a & 0b00000000000000000000000000000010) >> 1
    a3 =  (num_a & 0b00000000000000000000000000000100) >> 2
    a4 =  (num_a & 0b00000000000000000000000000001000) >> 3
    a5 =  (num_a & 0b00000000000000000000000000010000) >> 4
    a6 =  (num_a & 0b00000000000000000000000000100000) >> 5
    a7 =  (num_a & 0b00000000000000000000000001000000) >> 6
    a8 =  (num_a & 0b00000000000000000000000010000000) >> 7
    a9 =  (num_a & 0b00000000000000000000000100000000) >> 8
    a10 = (num_a & 0b00000000000000000000001000000000) >> 9
    a11 = (num_a & 0b00000000000000000000010000000000) >> 10
    a12 = (num_a & 0b00000000000000000000100000000000) >> 11
    a13 = (num_a & 0b00000000000000000001000000000000) >> 12
    a14 = (num_a & 0b00000000000000000010000000000000) >> 13
    a15 = (num_a & 0b00000000000000000100000000000000) >> 14
    a16 = (num_a & 0b00000000000000001000000000000000) >> 15
    a17 = (num_a & 0b00000000000000010000000000000000) >> 16
    a18 = (num_a & 0b00000000000000100000000000000000) >> 17
    a19 = (num_a & 0b00000000000001000000000000000000) >> 18
    a20 = (num_a & 0b00000000000010000000000000000000) >> 19
    a21 = (num_a & 0b00000000000100000000000000000000) >> 20
    a22 = (num_a & 0b00000000001000000000000000000000) >> 21
    a23 = (num_a & 0b00000000010000000000000000000000) >> 22
    a24 = (num_a & 0b00000000100000000000000000000000) >> 23
    a25 = (num_a & 0b00000001000000000000000000000000) >> 24
    a26 = (num_a & 0b00000010000000000000000000000000) >> 25
    a27 = (num_a & 0b00000100000000000000000000000000) >> 26
    a28 = (num_a & 0b00001000000000000000000000000000) >> 27
    a29 = (num_a & 0b00010000000000000000000000000000) >> 28
    a30 = (num_a & 0b00100000000000000000000000000000) >> 29
    a31 = (num_a & 0b01000000000000000000000000000000) >> 30
    a32 = (num_a & 0b10000000000000000000000000000000) >> 31


    d1, bo1 = full_subtractor_32bits(0b00000000000000000000000000000001 & a32, num_b)
    d1 = d1 & 0b01111111111111111111111111111111
    m1 = multiplexer_31bits(0b0000000000000000000000000000001 & a32, d1, bo1)

    d2, bo2 = full_subtractor_32bits(((m1 << 1) | a31), num_b)
    d2 = d2 & 0b01111111111111111111111111111111
    m2 = multiplexer_31bits((m1 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a31), d2, bo2)

    d3, bo3 = full_subtractor_32bits(((m2 << 1) | a30), num_b)
    d3 = d3 & 0b01111111111111111111111111111111
    m3 = multiplexer_31bits((m2 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a30), d3, bo3)

    d4, bo4 = full_subtractor_32bits(((m3 << 1) | a29), num_b)
    d4 = d4 & 0b01111111111111111111111111111111
    m4 = multiplexer_31bits((m3 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a29), d4, bo4)

    d5, bo5 = full_subtractor_32bits(((m4 << 1) | a28), num_b)
    d5 = d5 & 0b01111111111111111111111111111111
    m5 = multiplexer_31bits((m4 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a28), d5, bo5)

    d6, bo6 = full_subtractor_32bits(((m5 << 1) | a27), num_b)
    d6 = d6 & 0b01111111111111111111111111111111
    m6 = multiplexer_31bits((m5 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a27), d6, bo6)

    d7, bo7 = full_subtractor_32bits(((m6 << 1) | a26), num_b)
    d7 = d7 & 0b01111111111111111111111111111111
    m7 = multiplexer_31bits((m6 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a26), d7, bo7)

    d8, bo8 = full_subtractor_32bits(((m7 << 1) | a25), num_b)
    d8 = d8 & 0b01111111111111111111111111111111
    m8 = multiplexer_31bits((m7 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a25), d8, bo8)

    d9, bo9 = full_subtractor_32bits(((m8 << 1) | a24), num_b)
    d9 = d9 & 0b01111111111111111111111111111111
    m9 = multiplexer_31bits((m8 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a24), d9, bo9)

    d10, bo10 = full_subtractor_32bits(((m9 << 1) | a23), num_b)
    d10 = d10 & 0b01111111111111111111111111111111
    m10 = multiplexer_31bits((m9 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a23), d10, bo10)

    d11, bo11 = full_subtractor_32bits(((m10 << 1) | a22), num_b)
    d11 = d11 & 0b01111111111111111111111111111111
    m11 = multiplexer_31bits((m10 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a22), d11, bo11)

    d12, bo12 = full_subtractor_32bits(((m11 << 1) | a21), num_b)
    d12 = d12 & 0b01111111111111111111111111111111
    m12 = multiplexer_31bits((m11 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a21), d12, bo12)

    d13, bo13 = full_subtractor_32bits(((m12 << 1) | a20), num_b)
    d13 = d13 & 0b01111111111111111111111111111111
    m13 = multiplexer_31bits((m12 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a20), d13, bo13)

    d14, bo14 = full_subtractor_32bits(((m13 << 1) | a19), num_b)
    d14 = d14 & 0b01111111111111111111111111111111
    m14 = multiplexer_31bits((m13 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a19), d14, bo14)

    d15, bo15 = full_subtractor_32bits(((m14 << 1) | a18), num_b)
    d15 = d15 & 0b01111111111111111111111111111111
    m15 = multiplexer_31bits((m14 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a18), d15, bo15)

    d16, bo16 = full_subtractor_32bits(((m15 << 1) | a17), num_b)
    d16 = d16 & 0b01111111111111111111111111111111
    m16 = multiplexer_31bits((m15 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a17), d16, bo16)

    d17, bo17 = full_subtractor_32bits(((m16 << 1) | a16), num_b)
    d17 = d17 & 0b01111111111111111111111111111111
    m17 = multiplexer_31bits((m16 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a16), d17, bo17)

    d18, bo18 = full_subtractor_32bits(((m17 << 1) | a15), num_b)
    d18 = d18 & 0b01111111111111111111111111111111
    m18 = multiplexer_31bits((m17 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a15), d18, bo18)

    d19, bo19 = full_subtractor_32bits(((m18 << 1) | a14), num_b)
    d19 = d19 & 0b01111111111111111111111111111111
    m19 = multiplexer_31bits((m18 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a14), d19, bo19)

    d20, bo20 = full_subtractor_32bits(((m19 << 1) | a13), num_b)
    d20 = d20 & 0b01111111111111111111111111111111
    m20 = multiplexer_31bits((m19 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a13), d20, bo20)

    d21, bo21 = full_subtractor_32bits(((m20 << 1) | a12), num_b)
    d21 = d21 & 0b01111111111111111111111111111111
    m21 = multiplexer_31bits((m20 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a12), d21, bo21)

    d22, bo22 = full_subtractor_32bits(((m21 << 1) | a11), num_b)
    d22 = d22 & 0b01111111111111111111111111111111
    m22 = multiplexer_31bits((m21 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a11), d22, bo22)

    d23, bo23 = full_subtractor_32bits(((m22 << 1) | a10), num_b)
    d23 = d23 & 0b01111111111111111111111111111111
    m23 = multiplexer_31bits((m22 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a10), d23, bo23)

    d24, bo24 = full_subtractor_32bits(((m23 << 1) | a9), num_b)
    d24 = d24 & 0b01111111111111111111111111111111
    m24 = multiplexer_31bits((m23 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a9), d24, bo24)

    d25, bo25 = full_subtractor_32bits(((m24 << 1) | a8), num_b)
    d25 = d25 & 0b01111111111111111111111111111111
    m25 = multiplexer_31bits((m24 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a8), d25, bo25)

    d26, bo26 = full_subtractor_32bits(((m25 << 1) | a7), num_b)
    d26 = d26 & 0b01111111111111111111111111111111
    m26 = multiplexer_31bits((m25 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a7), d26, bo26)

    d27, bo27 = full_subtractor_32bits(((m26 << 1) | a6), num_b)
    d27 = d27 & 0b01111111111111111111111111111111
    m27 = multiplexer_31bits((m26 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a6), d27, bo27)

    d28, bo28 = full_subtractor_32bits(((m27 << 1) | a5), num_b)
    d28 = d28 & 0b01111111111111111111111111111111
    m28 = multiplexer_31bits((m27 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a5), d28, bo28)

    d29, bo29 = full_subtractor_32bits(((m28 << 1) | a4), num_b)
    d29 = d29 & 0b01111111111111111111111111111111
    m29 = multiplexer_31bits((m28 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a4), d29, bo29)

    d30, bo30 = full_subtractor_32bits(((m29 << 1) | a3), num_b)
    d30 = d30 & 0b01111111111111111111111111111111
    m30 = multiplexer_31bits((m29 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a3), d30, bo30)

    d31, bo31 = full_subtractor_32bits(((m30 << 1) | a2), num_b)
    d31 = d31 & 0b01111111111111111111111111111111
    m31 = multiplexer_31bits((m30 & 0b0111111111111111111111111111111) << 1 | (0b0000000000000000000000000000001 & a2), d31, bo31)

    d32, bo32 = full_subtractor_32bits(((m31 << 1) | a1), num_b)
    m32 = multiplexer_32bits(((m31 << 1) | a1), d32, bo32)

    q32 = bo1 ^ 0b1
    q31 = bo2 ^ 0b1
    q30 = bo3 ^ 0b1
    q29 = bo4 ^ 0b1
    q28 = bo5 ^ 0b1
    q27 = bo6 ^ 0b1
    q26 = bo7 ^ 0b1
    q25 = bo8 ^ 0b1
    q24 = bo9 ^ 0b1
    q23 = bo10 ^ 0b1
    q22 = bo11 ^ 0b1
    q21 = bo12 ^ 0b1
    q20 = bo13 ^ 0b1
    q19 = bo14 ^ 0b1
    q18 = bo15 ^ 0b1
    q17 = bo16 ^ 0b1
    q16 = bo17 ^ 0b1
    q15 = bo18 ^ 0b1
    q14 = bo19 ^ 0b1
    q13 = bo20 ^ 0b1
    q12 = bo21 ^ 0b1
    q11 = bo22 ^ 0b1
    q10 = bo23 ^ 0b1
    q9 = bo24 ^ 0b1
    q8 = bo25 ^ 0b1
    q7 = bo26 ^ 0b1
    q6 = bo27 ^ 0b1
    q5 = bo28 ^ 0b1
    q4 = bo29 ^ 0b1
    q3 = bo30 ^ 0b1
    q2 = bo31 ^ 0b1
    q1 = bo32 ^ 0b1

    r32 = (m32 & 0b10000000000000000000000000000000) >> 31
    r31 = (m32 & 0b01000000000000000000000000000000) >> 30
    r30 = (m32 & 0b00100000000000000000000000000000) >> 29
    r29 = (m32 & 0b00010000000000000000000000000000) >> 28
    r28 = (m32 & 0b00001000000000000000000000000000) >> 27
    r27 = (m32 & 0b00000100000000000000000000000000) >> 26
    r26 = (m32 & 0b00000010000000000000000000000000) >> 25
    r25 = (m32 & 0b00000001000000000000000000000000) >> 24
    r24 = (m32 & 0b00000000100000000000000000000000) >> 23
    r23 = (m32 & 0b00000000010000000000000000000000) >> 22
    r22 = (m32 & 0b00000000001000000000000000000000) >> 21
    r21 = (m32 & 0b00000000000100000000000000000000) >> 20
    r20 = (m32 & 0b00000000000010000000000000000000) >> 19
    r19 = (m32 & 0b00000000000001000000000000000000) >> 18
    r18 = (m32 & 0b00000000000000100000000000000000) >> 17
    r17 = (m32 & 0b00000000000000010000000000000000) >> 16
    r16 = (m32 & 0b00000000000000001000000000000000) >> 15
    r15 = (m32 & 0b00000000000000000100000000000000) >> 14
    r14 = (m32 & 0b00000000000000000010000000000000) >> 13
    r13 = (m32 & 0b00000000000000000001000000000000) >> 12
    r12 = (m32 & 0b00000000000000000000100000000000) >> 11
    r11 = (m32 & 0b00000000000000000000010000000000) >> 10
    r10 = (m32 & 0b00000000000000000000001000000000) >> 9
    r9  = (m32 & 0b00000000000000000000000100000000) >> 8
    r8  = (m32 & 0b00000000000000000000000010000000) >> 7
    r7  = (m32 & 0b00000000000000000000000001000000) >> 6
    r6  = (m32 & 0b00000000000000000000000000100000) >> 5
    r5  = (m32 & 0b00000000000000000000000000010000) >> 4
    r4  = (m32 & 0b00000000000000000000000000001000) >> 3
    r3  = (m32 & 0b00000000000000000000000000000100) >> 2
    r2  = (m32 & 0b00000000000000000000000000000010) >> 1
    r1  = (m32 & 0b00000000000000000000000000000001) >> 0

    q = q32 << 31 | q31 << 30 | q30 << 29 | q29 << 28 | q28 << 27 | q27 << 26 | q26 << 25 | q25 << 24 | q24 << 23 | q23 << 22 | q22 << 21 | q21 << 20 | q20 << 19 | q19 << 18 | q18 << 17 | q17 << 16 | q16 << 15 | q15 << 14 | q14 << 13 | q13 << 12 | q12 << 11 | q11 << 10 | q10 << 9 | q9 << 8 | q8 << 7 | q7 << 6 | q6 << 5 | q5 << 4 | q4 << 3 | q3 << 2 | q2 << 1 | q1 << 0
    r = r32 << 31 | r31 << 30 | r30 << 29 | r29 << 28 | r28 << 27 | r27 << 26 | r26 << 25 | r25 << 24 | r24 << 23 | r23 << 22 | r22 << 21 | r21 << 20 | r20 << 19 | r19 << 18 | r18 << 17 | r17 << 16 | r16 << 15 | r15 << 14 | r14 << 13 | r13 << 12 | r12 << 11 | r11 << 10 | r10 << 9 | r9 << 8 | r8 << 7 | r7 << 6 | r6 << 5 | r5 << 4 | r4 << 3 | r3 << 2 | r2 << 1 | r1 << 0

    return q, r